// Generated by delombok at Mon May 20 05:22:39 JST 2013
package jp.ac.osakau.farseerfc.purano.dep;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.Nullable;
import jp.ac.osakau.farseerfc.purano.reflect.MethodRep;
import jp.ac.osakau.farseerfc.purano.util.MethodDesc;
import jp.ac.osakau.farseerfc.purano.util.Types;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.MethodNode;
import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.google.common.collect.Collections2;

public class DepSet {
	private final Set<FieldDep> statics = new HashSet<>();
	// this pointer, Args, and true locals, all in the locals list, by the order
	private final Set<Integer> locals = new HashSet<>();
	private final Set<FieldDep> fields = new HashSet<>();
	
	public DepSet() {
		
	}
	
	public DepSet(DepSet... others) {
		
		for (DepSet o : others) {
			this.merge(o);
		}
	}
	
	public void merge(DepSet other) {
		this.statics.addAll(other.statics);
		this.locals.addAll(other.locals);
		this.fields.addAll(other.fields);
	}
	
	public String dumpDeps(final MethodRep rep, final Types table) {
		int argCount = rep.argCount();
		MethodNode methodNode = rep.getMethodNode();
		List<String> argsb = new ArrayList<>();
		List<String> localsb = new ArrayList<>();
		boolean thisDep = false;
		//System.err.printf("method %s ArgCount %s localV %s\n",methodNode.name,argCount,methodNode.localVariables.size());
		if (getLocals().contains(0) && ((methodNode.access & Opcodes.ACC_STATIC) == 0) && methodNode.localVariables.size() > 0) {
			thisDep = true;
		}
		for (int i = thisDep ? 1 : 0; i < argCount; i++) {
			if (getLocals().contains(i) && methodNode.localVariables.size() > i) {
				argsb.add(String.format("%s %s", table.desc2full(methodNode.localVariables.get(i).desc), methodNode.localVariables.get(i).name));
			}
		}
		if (methodNode.localVariables != null) {
			for (int i = argCount; i < methodNode.localVariables.size(); i++) {
				if (getLocals().contains(i) && methodNode.localVariables.size() > i) {
					localsb.add(String.format("%s %s", table.desc2full(methodNode.localVariables.get(i).desc), methodNode.localVariables.get(i).name));
				}
			}
		}
		final Function<FieldDep, String> dumper = new Function<FieldDep, String>(){
			
			
			@Override
			@Nullable
			public String apply(@Nullable FieldDep fd) {
				return fd.dump(table);
			}
		};
		List<String> result = new ArrayList<>();
		if (thisDep) {
			result.add("this");
		}
		if (argsb.size() > 0) {
			result.add(String.format("Args: [%s]", Joiner.on(", ").join(argsb)));
		}
		if (localsb.size() > 0) {
			result.add(String.format("Locals: [%s]", Joiner.on(", ").join(localsb)));
		}
		if (getFields().size() > 0) {
			result.add(String.format("Fields: [%s]", Joiner.on(", ").join(Collections2.transform(getFields(), dumper))));
		}
		if (getStatics().size() > 0) {
			result.add(String.format("Statics: [%s]", Joiner.on(", ").join(Collections2.transform(getStatics(), dumper))));
		}
		return Joiner.on(", ").join(result);
	}
	
	public boolean dependOnThis(MethodRep rep) {
		boolean thisDep = false;
		if (getLocals().contains(0) && ((rep.getMethodNode().access & Opcodes.ACC_STATIC) == 0) && rep.getMethodNode().localVariables.size() > 0) {
			thisDep = true;
		}
		return thisDep;
	}
	
	public boolean dependOnlyLocal(MethodRep rep) {
		int argCount = rep.argCount();
		if (getStatics().size() > 0) {
			return false;
		}
		if (getFields().size() > 0) {
			return false;
		}
		for (int local : getLocals()) {
			if (local < argCount) {
				return false;
			}
		}
		return true;
	}
	
	public boolean dependOnlyLocalArgs() {
		if (getStatics().size() > 0) {
			return false;
		}
		if (getFields().size() > 0) {
			return false;
		}
		return true;
	}
	
	public boolean dependOnlyArgs(MethodRep rep) {
		if (!dependOnlyLocalArgs()) {
			return false;
		}
		if (dependOnlyLocal(rep)) {
			return false;
		}
		return true;
	}
	
	@java.lang.SuppressWarnings("all")
	public Set<FieldDep> getStatics() {
		return this.statics;
	}
	
	@java.lang.SuppressWarnings("all")
	public Set<Integer> getLocals() {
		return this.locals;
	}
	
	@java.lang.SuppressWarnings("all")
	public Set<FieldDep> getFields() {
		return this.fields;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof DepSet)) return false;
		final DepSet other = (DepSet)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		final java.lang.Object this$statics = this.getStatics();
		final java.lang.Object other$statics = other.getStatics();
		if (this$statics == null ? other$statics != null : !this$statics.equals(other$statics)) return false;
		final java.lang.Object this$locals = this.getLocals();
		final java.lang.Object other$locals = other.getLocals();
		if (this$locals == null ? other$locals != null : !this$locals.equals(other$locals)) return false;
		final java.lang.Object this$fields = this.getFields();
		final java.lang.Object other$fields = other.getFields();
		if (this$fields == null ? other$fields != null : !this$fields.equals(other$fields)) return false;
		return true;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean canEqual(final java.lang.Object other) {
		return other instanceof DepSet;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		final java.lang.Object $statics = this.getStatics();
		result = result * PRIME + ($statics == null ? 0 : $statics.hashCode());
		final java.lang.Object $locals = this.getLocals();
		result = result * PRIME + ($locals == null ? 0 : $locals.hashCode());
		final java.lang.Object $fields = this.getFields();
		result = result * PRIME + ($fields == null ? 0 : $fields.hashCode());
		return result;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "DepSet(statics=" + this.getStatics() + ", locals=" + this.getLocals() + ", fields=" + this.getFields() + ")";
	}
}